# -*- coding: utf-8 -*-
"""ML Music - Extracting Vocals from Audio w/ spleeter - DEMO v2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B6PhpVFLqSRpjgUTtD6zi0QDjZ06yDqA

# Setup
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# 
# !apt install ffmpeg

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# 
# !pip install spleeter

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# 
# !wget https://github.com/deezer/spleeter/raw/master/audio_example.mp3

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# 
# !wget https://github.com/s2t2/ml-music-2023/raw/main/test/audio/pop.00032.wav

"""# Splitting Audio"""

from IPython.display import Audio, display

AUDIO_FILEPATH = "audio_example.mp3"
Audio(AUDIO_FILEPATH)

Audio("pop.00032.wav")

"""## via CLI"""

!spleeter separate -o output/ audio_example.mp3

!ls output/audio_example

Audio('output/audio_example/vocals.wav')

Audio('output/audio_example/accompaniment.wav')

"""## via Python (to File)"""

from IPython.display import Audio, display

# https://github.com/deezer/spleeter/wiki/4.-API-Reference#separator
# https://github.com/deezer/spleeter/wiki/2.-Getting-started#using-2stems-model
# https://github.com/deezer/spleeter/blob/master/spleeter/separator.py

from spleeter.separator import Separator

# 2 stems: [vocals, other]
# 4 stems: [vocals, drums, bass, other]
# 5 stems: [vocals, piano, drums, bass, other]

sep = Separator('spleeter:2stems')

OUTPUT_DIR = "my_output"
# separator.separate_to_file('/path/to/audio', '/path/to/output/directory')
sep.separate_to_file(audio_descriptor=AUDIO_FILEPATH, destination=OUTPUT_DIR)

import os
from IPython.display import Audio, display

vocals_filepath = os.path.join(OUTPUT_DIR, "audio_example", "vocals.wav")
accomp_filepath = os.path.join(OUTPUT_DIR, "audio_example", "accompaniment.wav")

display(Audio(vocals_filepath))
display(Audio(accomp_filepath))

"""## via Python (to Data)


"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install librosa

import librosa

audio_filepath = "pop.00032.wav"
audio, sample_rate = librosa.load(audio_filepath)
audio.shape

from IPython.display import Audio, display

def play_in_colab(audio_data=None, image=True):
    display(Audio(audio_data, autoplay=False, rate=sample_rate)) # rate only necessary when passing custom audio data

play_in_colab(audio)

from spleeter.separator import Separator

# 2 stems: [vocals, other]
# 4 stems: [vocals, drums, bass, other]
# 5 stems: [vocals, piano, drums, bass, other]

import numpy as np

def split(audio_data, n_stems=5):
    model_name = f"spleeter:{n_stems}stems"
    sep = Separator(model_name)
    return sep.separate(audio_data.reshape(-1, 1))

"""### 5 Stems"""

splits = split(audio_data=audio, n_stems=5)
splits.keys()

vocals = splits["vocals"]
vocals.shape

from pandas import DataFrame
DataFrame(vocals, columns=["vocals_0", "vocals_1"]).head()

"""Interesting that two columns are returned for each stem? And their values are similar?

https://github.com/deezer/spleeter/issues/849
"""

#vocals_0 = vocals[:,0] # first column
#vocals_1 = vocals[:,1]
#print(vocals_0.shape)

#vocals_avg = vocals.mean(axis=1)
#vocals_avg.shape

#print("VOCALS 0:")
#play_in_colab(vocals_0)
#print("VOCALS 1:")
#play_in_colab(vocals_1)
#print("VOCALS AVG")
#play_in_colab(vocals_avg) # does this sound better / as good?

for stem_name in splits.keys():
    print("----------------------")
    print(stem_name.upper())
    play_in_colab(splits[stem_name][:,0])
    play_in_colab(splits[stem_name][:,1])
    play_in_colab(splits[stem_name].mean(axis=1)) # take the average of both columns

"""### 4 Stems

"""

splits = split(audio_data=audio, n_stems=4)
splits.keys()

for stem_name in splits.keys():
    print("----------------------")
    print(stem_name.upper())
    play_in_colab(splits[stem_name][:,0])
    play_in_colab(splits[stem_name][:,1])
    play_in_colab(splits[stem_name].mean(axis=1))

"""### 2 Stems

"""

splits = split(audio_data=audio, n_stems=2)
splits.keys()

for stem_name in splits.keys():
    print("----------------------")
    print(stem_name.upper())
    play_in_colab(splits[stem_name][:,0])
    play_in_colab(splits[stem_name][:,1])
    play_in_colab(splits[stem_name].mean(axis=1))

